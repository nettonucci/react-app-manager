{"ast":null,"code":"var _jsxFileName = \"/Users/nettonucci/Documents/www/react-manager-app/src/views/Typography/Typography.js\";\n\n/* eslint-disable quotes */\nimport React, { useEffect } from 'react'; // import logo from './logo.svg';\n// import './App.css';\n\nimport * as am4core from '@amcharts/amcharts4/core';\nimport * as am4charts from '@amcharts/amcharts4/charts';\nimport am4themes_animated from '@amcharts/amcharts4/themes/animated';\nimport api from '../../server/api';\n\nconst Typography = () => {\n  useEffect(() => {\n    /* Chart code */\n    // Themes begin\n    am4core.useTheme(am4themes_animated); // Themes end\n    // Create chart instance\n\n    let chart = am4core.create('chartdiv', am4charts.PieChart);\n    api.get('porcentagemplataforma').then(response => {\n      const dados = response.data;\n      chart.data = dados;\n    }); // Add and configure Series\n\n    let pieSeries = chart.series.push(new am4charts.PieSeries());\n    pieSeries.dataFields.value = 'Porcentagem';\n    pieSeries.dataFields.category = 'Plataforma'; // Let's cut a hole in our Pie chart the size of 30% the radius\n\n    chart.innerRadius = am4core.percent(30); // Put a thick white border around each Slice\n\n    pieSeries.slices.template.stroke = am4core.color('#fff');\n    pieSeries.slices.template.strokeWidth = 2;\n    pieSeries.slices.template.strokeOpacity = 1; // change the cursor on hover to make it apparent the object can be interacted with\n\n    pieSeries.slices.template.cursorOverStyle = [{\n      property: 'cursor',\n      value: 'pointer'\n    }];\n    pieSeries.alignLabels = false;\n    pieSeries.labels.template.bent = true;\n    pieSeries.labels.template.radius = 3;\n    pieSeries.labels.template.padding(0, 0, 0, 0);\n    pieSeries.ticks.template.disabled = true; // Create a base filter effect (as if it's not there) for the hover to return to\n\n    let shadow = pieSeries.slices.template.filters.push(new am4core.DropShadowFilter());\n    shadow.opacity = 0; // Create hover state\n\n    let hoverState = pieSeries.slices.template.states.getKey('hover'); // normally we have to create the hover state, in this case it already exists\n    // Slightly shift the shadow and make it more prominent on hover\n\n    let hoverShadow = hoverState.filters.push(new am4core.DropShadowFilter());\n    hoverShadow.opacity = 0.7;\n    hoverShadow.blur = 5; // Add a legend\n\n    chart.legend = new am4charts.Legend();\n  }, []);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    id: \"chartdiv\",\n    style: {\n      width: '100%',\n      height: '500px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 10\n    }\n  });\n};\n\nexport default Typography;","map":{"version":3,"sources":["/Users/nettonucci/Documents/www/react-manager-app/src/views/Typography/Typography.js"],"names":["React","useEffect","am4core","am4charts","am4themes_animated","api","Typography","useTheme","chart","create","PieChart","get","then","response","dados","data","pieSeries","series","push","PieSeries","dataFields","value","category","innerRadius","percent","slices","template","stroke","color","strokeWidth","strokeOpacity","cursorOverStyle","property","alignLabels","labels","bent","radius","padding","ticks","disabled","shadow","filters","DropShadowFilter","opacity","hoverState","states","getKey","hoverShadow","blur","legend","Legend","width","height"],"mappings":"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","sourcesContent":["/* eslint-disable quotes */\nimport React, { useEffect } from 'react';\n// import logo from './logo.svg';\n// import './App.css';\nimport * as am4core from '@amcharts/amcharts4/core';\nimport * as am4charts from '@amcharts/amcharts4/charts';\nimport am4themes_animated from '@amcharts/amcharts4/themes/animated';\nimport api from '../../server/api';\n\nconst Typography = () => {\n  useEffect(() => {\n    /* Chart code */\n    // Themes begin\n    am4core.useTheme(am4themes_animated);\n    // Themes end\n\n    // Create chart instance\n    let chart = am4core.create('chartdiv', am4charts.PieChart);\n\n    api.get('porcentagemplataforma').then(response => {\n      const dados = response.data;\n      chart.data = dados;\n    });\n\n    // Add and configure Series\n    let pieSeries = chart.series.push(new am4charts.PieSeries());\n    pieSeries.dataFields.value = 'Porcentagem';\n    pieSeries.dataFields.category = 'Plataforma';\n\n    // Let's cut a hole in our Pie chart the size of 30% the radius\n    chart.innerRadius = am4core.percent(30);\n\n    // Put a thick white border around each Slice\n    pieSeries.slices.template.stroke = am4core.color('#fff');\n    pieSeries.slices.template.strokeWidth = 2;\n    pieSeries.slices.template.strokeOpacity = 1;\n    // change the cursor on hover to make it apparent the object can be interacted with\n    pieSeries.slices.template.cursorOverStyle = [\n      {\n        property: 'cursor',\n        value: 'pointer'\n      }\n    ];\n\n    pieSeries.alignLabels = false;\n    pieSeries.labels.template.bent = true;\n    pieSeries.labels.template.radius = 3;\n    pieSeries.labels.template.padding(0, 0, 0, 0);\n\n    pieSeries.ticks.template.disabled = true;\n\n    // Create a base filter effect (as if it's not there) for the hover to return to\n    let shadow = pieSeries.slices.template.filters.push(\n      new am4core.DropShadowFilter()\n    );\n    shadow.opacity = 0;\n\n    // Create hover state\n    let hoverState = pieSeries.slices.template.states.getKey('hover'); // normally we have to create the hover state, in this case it already exists\n\n    // Slightly shift the shadow and make it more prominent on hover\n    let hoverShadow = hoverState.filters.push(new am4core.DropShadowFilter());\n    hoverShadow.opacity = 0.7;\n    hoverShadow.blur = 5;\n\n    // Add a legend\n    chart.legend = new am4charts.Legend();\n  }, []);\n\n  return <div\n    id=\"chartdiv\"\n    style={{ width: '100%', height: '500px' }}\n  />;\n};\n\nexport default Typography;\n"]},"metadata":{},"sourceType":"module"}